test {
  name: "AddsRequestHeader"
  benchmark: true
  request_headers {
    result {
      has_header { key: "Message" value: "hello" }
      has_header { key: "Welcome" value: "warm" }
    }
  }
}
test {
  name: "UpdatesRequestHeader"
  benchmark: true
  request_headers {
    input {
      header { key: "Message" value: "hey" }
      header { key: "Welcome" value: "cold" }
    }
    result {
      has_header { key: "Message" value: "hey, hello" }
      has_header { key: "Welcome" value: "warm" }
    }
  }
}
# Behavior is independent of stream.
test {
  name: "RequestAndResponse"
  benchmark: true
  request_headers {
    result { has_header { key: "Message" value: "hello" } }
  }
}
# Tests for header name case insensitivity.
# NOTE: the test framework uses the same case-insensitive header map as the
# wasm host context. This means a header key has the case used when it was
# first created. It also means that we can't test casing in our expectations.
# Here we are simply verifying that the wasm behavior is unaffected by case.
test {
  name: "CaseInsensitiveUpdates"
  request_headers {
    input {
      header { key: "message" value: "hey" }
      header { key: "welcome" value: "cold" }
    }
    result {
      has_header { key: "message" value: "hey, hello" }
      has_header { key: "welcome" value: "warm" }
    }
  }
}