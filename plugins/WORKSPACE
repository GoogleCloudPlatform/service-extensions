load("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")

# Release: https://github.com/REPO/releases/tag/YYY
# Get SHA256: `wget https://github.com/$REPO/archive/$COMMIT.tar.gz && sha256sum $COMMIT.tar.gz`
#
# To override with local branches, pass `--override_repository=REPO=/local/path` to Bazel
# or persist the option in `.bazelrc`.

# --- PLUGIN + TEST RUNNER DEPENDENCIES ---

# Platforms update for @platforms//os:emscripten
http_archive(
    name = "platforms",
    sha256 = "218efe8ee736d26a3572663b374a253c012b716d8af0c07e842e82f238a0a7ee",
    urls = [
        "https://mirror.bazel.build/github.com/bazelbuild/platforms/releases/download/0.0.10/platforms-0.0.10.tar.gz",
        "https://github.com/bazelbuild/platforms/releases/download/0.0.10/platforms-0.0.10.tar.gz",
    ],
)

# Abseil for base libs. Updated to work with latest Emscripten and STANDALONE_WASM.
http_archive(
    name = "com_google_absl",
    sha256 = "95e90be7c3643e658670e0dd3c1b27092349c34b632c6e795686355f67eca89f",
    strip_prefix = "abseil-cpp-20240722.0",
    urls = ["https://github.com/abseil/abseil-cpp/archive/20240722.0.zip"],
)

# RE2 for C++ regex.
http_archive(
    name = "com_google_re2",
    sha256 = "18cf85922e27fad3ed9c96a27733037da445f35eb1a2744c306a37c6d11e95c4",
    strip_prefix = "re2-2023-07-01",
    url = "https://github.com/google/re2/archive/2023-07-01.tar.gz",
)

# Boost for C++ URL parsing.
http_archive(
    name = "com_github_nelhage_rules_boost",  # 2023-06-29, boost @ 1.80.0
    sha256 = "1404ffb9f3f7253927c97bc2e05ef6b4a2a5089b76d00cef0f6b7d5a678fad88",
    strip_prefix = "rules_boost-0598ab9aa992d6ad45088b480e1bf4526ef4ad04",
    url = "https://github.com/nelhage/rules_boost/archive/0598ab9aa992d6ad45088b480e1bf4526ef4ad04.tar.gz",
)

load("@com_github_nelhage_rules_boost//:boost/boost.bzl", "boost_deps")

boost_deps()

# Update boringssl to pick up fix for strdup build issue:
# https://boringssl-review.googlesource.com/c/boringssl/+/64047
http_archive(
    name = "boringssl", # 2024-04-29
    sha256 = "cd240bf27450f75cd5f41c512a06297c00646cdbac9f87b604e9312771db15a6",
    strip_prefix = "boringssl-2db0eb3f96a5756298dcd7f9319e56a98585bd10",
    url = "https://github.com/google/boringssl/archive/2db0eb3f96a5756298dcd7f9319e56a98585bd10.tar.gz",
)

# JWT verification lib for C++.
http_archive(
    name = "jwt_verify_lib",
    sha256 = "637e4983506c4f26bbe2808ae4e1944e46cbb2277d34ff0b8a3b72bdac3c4b91",
    strip_prefix = "jwt_verify_lib-b59e8075d4a4f975ba6f109e1916d6e60aeb5613",
    url = "https://github.com/google/jwt_verify_lib/archive/b59e8075d4a4f975ba6f109e1916d6e60aeb5613.tar.gz",
)
bind(
    name = "abseil_strings",
    actual = "@com_google_absl//absl/strings:strings",
)
bind(
    name = "abseil_flat_hash_set",
    actual = "@com_google_absl//absl/container:flat_hash_set",
)
bind(
    name = "abseil_time",
    actual = "@com_google_absl//absl/time:time",
)
bind(
    name = "protobuf",
    actual = "@com_google_protobuf//:protobuf",
)
bind(
    name = "ssl",
    actual = "@boringssl//:ssl",
)

# --- TEST RUNNER DEPENDENCIES ---

# Testing frameworks.
http_archive(
    name = "com_google_benchmark",
    sha256 = "6bc180a57d23d4d9515519f92b0c83d61b05b5bab188961f36ac7b06b0d9e9ce",
    strip_prefix = "benchmark-1.8.3",
    urls = ["https://github.com/google/benchmark/archive/refs/tags/v1.8.3.tar.gz"],
)

http_archive(
    name = "com_google_googletest",
    sha256 = "8ad598c73ad796e0d8280b082cebd82a630d73e73cd3c70057938a6501bba5d7",
    strip_prefix = "googletest-1.14.0",
    urls = ["https://github.com/google/googletest/archive/refs/tags/v1.14.0.tar.gz"],
)

# For testing, include Quiche for its Balsa header library.
http_archive(
    name = "com_github_google_quiche",  # 2024-05-16
    patch_args = ["-p1"],
    patches = ["//:quiche.patch"],
    sha256 = "ae33ab0056fd5119d9aae15abfcb69e5d6f021ec5e18e77535ec0fe0c49dfa66",
    strip_prefix = "quiche-1397c94d55af0bfc142ac7dda923cf2726857755",
    urls = ["https://github.com/google/quiche/archive/1397c94d55af0bfc142ac7dda923cf2726857755.tar.gz"],
)

# For testing, GoogleURL is a Quiche dependency.
http_archive(
    name = "com_google_googleurl",  # 2024-10-09
    sha256 = "3db90606ea9ca123d11f85c6fa3627a1e1e403d38c7fd1854a628cf1da3be5e2",
    urls = ["https://storage.googleapis.com/quiche-envoy-integration/googleurl-9cdb1f4d1a365ebdbcbf179dadf7f8aa5ee802e7.tar.gz"],
)

http_archive(
    name = "yaml_cpp",
    urls = [
        "https://github.com/jbeder/yaml-cpp/archive/refs/tags/0.8.0.tar.gz",
    ],
    strip_prefix = "yaml-cpp-0.8.0",
    sha256 = "fbe74bbdcee21d656715688706da3c8becfd946d92cd44705cc6098bb23b3a16",
    build_file_content = r"""
package(default_visibility = ["//visibility:public"])

cc_library(
    name = "yaml-cpp",
    srcs = glob(["src/**/*.cpp"]),
    hdrs = glob([
        "include/**/*.h",
        "src/**/*.h",
    ]),
    includes = [
        "include",
        "src",
    ],
    copts = select({
        "//conditions:default": ["-fPIC"],
    }),
    defines = ["YAML_CPP_STATIC_DEFINE"],
)
""",
)

# --- PLUGIN DEPENDENCIES ---

PROXY_WASM_CPP_HOST_COMMIT = "c4d7bb0fda912e24c64daf2aa749ec54cec99412"  # 2024-12-19

PROXY_WASM_CPP_HOST_SHA256 = "3ea005e85d2b37685149c794c6876fd6de7f632f0ad49dc2b3cd580e7e7a5525"

http_archive(
    name = "proxy_wasm_cpp_host",
    sha256 = PROXY_WASM_CPP_HOST_SHA256,
    strip_prefix = "proxy-wasm-cpp-host-" + PROXY_WASM_CPP_HOST_COMMIT,
    url = "https://github.com/proxy-wasm/proxy-wasm-cpp-host/archive/" + PROXY_WASM_CPP_HOST_COMMIT + ".tar.gz",
)

PROXY_WASM_CPP_SDK_COMMIT = "7465dee8b2953beebff99f6dc3720ad0c79bab99"  # 2025-03-04

PROXY_WASM_CPP_SDK_SHA256 = "26c4c0f9f645de7e789dc92f113d7352ee54ac43bb93ae3a8a22945f1ce71590"

http_archive(
    name = "proxy_wasm_cpp_sdk",
    sha256 = PROXY_WASM_CPP_SDK_SHA256,
    strip_prefix = "proxy-wasm-cpp-sdk-" + PROXY_WASM_CPP_SDK_COMMIT,
    url = "https://github.com/proxy-wasm/proxy-wasm-cpp-sdk/archive/" + PROXY_WASM_CPP_SDK_COMMIT + ".tar.gz",
)

# Duplicate the ProxyWasm WORKSPACE files (dependencies)
# Consider adopting bzlmod for this: https://docs.bazel.build/versions/5.0.0/bzlmod.html

load("@proxy_wasm_cpp_host//bazel:repositories.bzl", "proxy_wasm_cpp_host_repositories")

proxy_wasm_cpp_host_repositories()

load("@proxy_wasm_cpp_host//bazel:dependencies.bzl", "proxy_wasm_cpp_host_dependencies")

proxy_wasm_cpp_host_dependencies()

load("@proxy_wasm_cpp_host//bazel:dependencies_python.bzl", "proxy_wasm_cpp_host_dependencies_python")

proxy_wasm_cpp_host_dependencies_python()

load("@proxy_wasm_cpp_host//bazel:dependencies_import.bzl", "proxy_wasm_cpp_host_dependencies_import")

proxy_wasm_cpp_host_dependencies_import()

load("@proxy_wasm_cpp_sdk//bazel:repositories.bzl", "proxy_wasm_cpp_sdk_repositories")

proxy_wasm_cpp_sdk_repositories()

load("@proxy_wasm_cpp_sdk//bazel:dependencies.bzl", "proxy_wasm_cpp_sdk_dependencies")

proxy_wasm_cpp_sdk_dependencies()

load("@proxy_wasm_cpp_sdk//bazel:dependencies_extra.bzl", "proxy_wasm_cpp_sdk_dependencies_extra")

proxy_wasm_cpp_sdk_dependencies_extra()

# Cargo for Bazel to define Rust dependencies.
# http://bazelbuild.github.io/rules_rust/crate_universe.html
# Depends on rules_rust imported by ProxyWasm.
load("@rules_rust//crate_universe:repositories.bzl", "crate_universe_dependencies")

crate_universe_dependencies(bootstrap = True)

# Regenerate: $ bazelisk run bazel/cargo:crates_vendor -- --repin
# Reference: //bazel/cargo/remote:proxy-wasm (etc)
load("//bazel/cargo/remote:crates.bzl", "crate_repositories")

crate_repositories()

http_archive(
    name = "io_bazel_rules_go",
    sha256 = "6b31d0956948082d918879d2fad0d6351f6471af113c4df363ead109419345ec",
    strip_prefix = "rules_go-623f600f2907d02332d2519b96d1849c9d566bb6",
    urls = [
        "https://github.com/bazel-contrib/rules_go/archive/623f600f2907d02332d2519b96d1849c9d566bb6.zip",
    ],
)

http_archive(
    name = "bazel_gazelle",
    sha256 = "aefbf2fc7c7616c9ed73aa3d51c77100724d5b3ce66cfa16406e8c13e87c8b52",
    urls = [
        "https://github.com/bazelbuild/bazel-gazelle/releases/download/v0.41.0/bazel-gazelle-v0.41.0.tar.gz",
    ],
)

load("@bazel_gazelle//:deps.bzl", "gazelle_dependencies", "go_repository")
load("@io_bazel_rules_go//go:deps.bzl", "go_register_toolchains", "go_rules_dependencies")

go_repository(
    name = "com_github_proxy_wasm_proxy_wasm_go_sdk",
    importpath = "github.com/proxy-wasm/proxy-wasm-go-sdk",
    sum = "h1:UiqUl6PLcIW4S93FkmbK9gK2r2veY0MI6nKEXMk/9Ws=",
    version = "v0.0.0-20241219182957-23e5db51ea08",
)

go_repository(
    name = "com_github_golang_jwt_jwt_v5",
    importpath = "github.com/golang-jwt/jwt/v5",
    sum = "h1:OuVbFODueb089Lh128TAcimifWaLhJwVflnrgM17wHk=",
    version = "v5.2.1",
)

go_rules_dependencies()

go_register_toolchains(version = "1.24rc1")

gazelle_dependencies()
